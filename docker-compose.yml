services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  recordings-service:
    build: ./recordings-service
    container_name: recordings-service
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=${DB_NAME_RECORDINGS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - NODE_ENV=development
      - VIDEO_UPLOAD_PATH=/data/videos
    volumes:
      - recordings_storage:/data/videos
    ports:
      - "7003:7003"
    networks:
      - app-network

  user-service:
    build: ./user-service
    container_name: user-service
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME_USERS=${MYSQL_DATABASE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - NODE_ENV=development
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://192.168.6.128:5173,http://api-gateway:3000
      - HOST=0.0.0.0
    ports:
      - "3001:3000"
    networks:
      - app-network

  auth-service:   # ðŸ‘ˆ must be here, same level as user-service, mysql, etc.
    build: ./auth-service
    container_name: auth-service
    depends_on:
      redis:
        condition: service_started
      user-service:
        condition: service_started
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=supersecret
      - USER_SERVICE_URL=http://user-service:3000
      - NODE_ENV=development
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://192.168.6.128:5173,http://api-gateway:3000
      - HOST=0.0.0.0
    ports:
      - "3002:3000"
    networks:
      - app-network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      recordings-service:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - AUTH_SERVICE_URL=http://auth-service:3000
      - USER_SERVICE_URL=http://user-service:3000
      - RECORDINGS_SERVICE_URL=http://recordings-service:7003
      - NODE_ENV=development
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://192.168.6.128:5173
      - HOST=0.0.0.0
    ports:
      - "3000:3000"
    networks:
      - app-network

volumes:
  mysql_data:
  recordings_storage:

networks:
  app-network:
    driver: bridge
    name: eduvibe-network
